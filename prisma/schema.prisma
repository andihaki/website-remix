// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email    String  @unique
  username String  @unique
  phone    String? @unique // numeric string

  fullname String
  nickname String?

  profile       UserProfile?
  userProfileId String       @unique
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([email])
}

model Role {
  id String @id @default(cuid())

  sequence    Int?    @unique // 1, 2, 3, ...
  symbol      String  @unique // ROOT, ADMIN, MEMBER, ...
  name        String  @unique // Root, Admin, Member, ...
  description String? @db.Text // Summary of abilities

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([symbol])
}

model Event {
  id String @id @default(cuid())

  slug        String  @unique
  title       String  @db.Text
  description String  @db.Text
  content     String? @db.Text // Rich HTML Text
  url         String? // Url for online or hybrid

  dateTimeStart DateTime @default(now())
  dateTimeEnd   DateTime @default(now())

  imageUrl String

  locationName    String
  locationAddress String?

  eventAgendas EventAgenda[]

  registration String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventAgenda {
  id            String       @id @default(cuid())
  title         String
  description   String
  speaker       UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
  Event         Event?       @relation(fields: [eventId], references: [id])
  eventId       String?
  dateTimeStart DateTime
  dateTimeEnd   DateTime
}

// used by User & Event (event agenda has speakers)
model UserProfile {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @unique

  headline String?
  avatar   String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventAgendas EventAgenda[]

  @@unique([id, userId])
  @@index([userId])
}
